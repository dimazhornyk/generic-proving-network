// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: generic-proving-network.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvingNetworkServiceClient is the client API for ProvingNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvingNetworkServiceClient interface {
	ComputeProof(ctx context.Context, in *ComputeProofRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error)
}

type provingNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvingNetworkServiceClient(cc grpc.ClientConnInterface) ProvingNetworkServiceClient {
	return &provingNetworkServiceClient{cc}
}

func (c *provingNetworkServiceClient) ComputeProof(ctx context.Context, in *ComputeProofRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.ProvingNetworkService/ComputeProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provingNetworkServiceClient) GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*GetProofResponse, error) {
	out := new(GetProofResponse)
	err := c.cc.Invoke(ctx, "/proto.ProvingNetworkService/GetProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvingNetworkServiceServer is the server API for ProvingNetworkService service.
// All implementations must embed UnimplementedProvingNetworkServiceServer
// for forward compatibility
type ProvingNetworkServiceServer interface {
	ComputeProof(context.Context, *ComputeProofRequest) (*emptypb.Empty, error)
	GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error)
	mustEmbedUnimplementedProvingNetworkServiceServer()
}

// UnimplementedProvingNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProvingNetworkServiceServer struct {
}

func (UnimplementedProvingNetworkServiceServer) ComputeProof(context.Context, *ComputeProofRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeProof not implemented")
}
func (UnimplementedProvingNetworkServiceServer) GetProof(context.Context, *GetProofRequest) (*GetProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedProvingNetworkServiceServer) mustEmbedUnimplementedProvingNetworkServiceServer() {}

// UnsafeProvingNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvingNetworkServiceServer will
// result in compilation errors.
type UnsafeProvingNetworkServiceServer interface {
	mustEmbedUnimplementedProvingNetworkServiceServer()
}

func RegisterProvingNetworkServiceServer(s grpc.ServiceRegistrar, srv ProvingNetworkServiceServer) {
	s.RegisterService(&ProvingNetworkService_ServiceDesc, srv)
}

func _ProvingNetworkService_ComputeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvingNetworkServiceServer).ComputeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvingNetworkService/ComputeProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvingNetworkServiceServer).ComputeProof(ctx, req.(*ComputeProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvingNetworkService_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvingNetworkServiceServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProvingNetworkService/GetProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvingNetworkServiceServer).GetProof(ctx, req.(*GetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProvingNetworkService_ServiceDesc is the grpc.ServiceDesc for ProvingNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvingNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProvingNetworkService",
	HandlerType: (*ProvingNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeProof",
			Handler:    _ProvingNetworkService_ComputeProof_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _ProvingNetworkService_GetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generic-proving-network.proto",
}
